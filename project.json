{
	"info": {
		"_postman_id": "bb9a02ba-0496-4864-9321-936f7ac9b2de",
		"name": "REQRES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38456938",
		"_collection_link": "https://dark-escape-7958.postman.co/workspace/Qspider_Postman_Projects~f17a0bfa-d2ef-47bc-ac3b-bb0b44c08775/collection/38456938-bb9a02ba-0496-4864-9321-936f7ac9b2de?action=share&source=collection_link&creator=38456938"
	},
	"item": [
		{
			"name": "get request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Status message is OK\", function () {",
							"    pm.expect(pm.response.reason()).to.eql(\"OK\");",
							"});",
							"",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data object should exist and be an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Support object is present and contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('support').that.is.an('object');",
							"    pm.expect(responseData.support).to.have.all.keys('url', 'text');",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.id).to.exist;",
							"    pm.expect(responseData.data.email).to.exist;",
							"    pm.expect(responseData.data.first_name).to.exist;",
							"    pm.expect(responseData.data.last_name).to.exist;",
							"    pm.expect(responseData.data.avatar).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Support object and its fields are valid\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.support).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.support.url).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.support.text).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is present in the response\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response follows the expected schema\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.data).to.have.property('id').that.is.a('number');",
							"    pm.expect(responseData.data).to.have.property('email').that.is.a('string');",
							"    pm.expect(responseData.data).to.have.property('first_name').that.is.a('string');",
							"    pm.expect(responseData.data).to.have.property('last_name').that.is.a('string');",
							"    pm.expect(responseData.data).to.have.property('avatar').that.is.a('string');",
							"    pm.expect(responseData).to.have.property('support').that.is.an('object');",
							"    pm.expect(responseData.support).to.have.property('url').that.is.a('string');",
							"    pm.expect(responseData.support).to.have.property('text').that.is.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{glo_url}}/api/users/2",
					"host": [
						"{{glo_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "successful login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Token is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"//    var regex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/;",
							"      var regex = /[A-Za-z0-9]/;",
							"",
							"    pm.expect(responseData.token).to.be.a('string').and.to.match(regex);",
							"});",
							"",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(600);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Token is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Token is not null or empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.exist.and.to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{glo_url}}/api/login",
					"host": [
						"{{glo_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	]
}